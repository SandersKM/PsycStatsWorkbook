ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Let's find the mode SAT score:
Mode(Mathlevel$sat)
i <- unique(Mathlevel$sat)
i
match(Mathlevel$sat)
match(Mathlevel$sat, i)
plot(density(Mathlevel$sat))
Mathlevel$sat
tabulate(match(Mathlevel$sat, i))
i <- unique(Mathlevel$sat)
i
# Finding the mode is a bit harder.
# Sadly mode(x) doesn't work.
# Let's create our own function.
# First, we can find all of the unique values
uni <- unique(Mathlevel$sat)
# All of the values in uni have a unique index. For instance:
uni[1]
uni[2]
uni[1] == uni[2]
tabulate(Mathlevel$sat)
i[which.max(tabulate(match(Mathlevel$sat, i)))]
# Let's find the median SAT score:
median(Mathlevel$sat, na.rm = TRUE).
# Finding the mode is a bit harder.
# Sadly mode(x) doesn't work.
# Let's create our own function.
# First, we can find all of the unique values
uni <- unique(Mathlevel$sat)
# This next function finds the how many times each value shows up and picks the largest
uni[which.max(tabulate(match(Mathlevel$sat, uni)))]
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Mathlevel$sat))
?plot
?density
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Mathlevel$sat), title("Density of SAT scores"))
?plot
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Mathlevel$sat), main = "Density of SAT scores")
# First, we will save the data as a variable in RStudio
data("incomeInequality")
head(incomeInequality)
# Let's learn what kind of data this is
?Treatment
mean(Treatment)
mean(Treatment$age, na.rm = TRUE)
mean(Treatment$education, na.rm = TRUE)
Treatment$educ
median(Treatment$education, na.rm = TRUE)
mean(Treatment$re75, na.rm = TRUE)
mean(Treatment$re74, na.rm = TRUE)
mean(Treatment$re78, na.rm = TRUE)
mean(Treatment$u78, na.rm = TRUE)
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Mathlevel$sat))
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Treatment$age))
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Treatment$re75))
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Treatment$re76))
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Treatment$re74))
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Treatment$re78))
# What is the average age of participants
mean(Treatment$age)
Mode <- function(x) {
uni <- unique(x)
ux[which.max(tabulate(match(x, uni)))]
}
# What is the mode age of participants
Mode(Treatment$age)
# Now let's try the same thing with the variable "sat"
sat_frequency <- Mathlevel %>% count(sat)
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Mathlevel")
# Let's learn what kind of data this is
?Mathlevel
# Now let's try the same thing with the variable "sat"
sat_frequency <- Mathlevel %>% count(sat)
sat_frequency # View the table in the console. "n" is the number of observations
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Mathlevel")
# Let's learn what kind of data this is
?Mathlevel
# Let's find the mean SAT score:
mean(Mathlevel$sat, na.rm = TRUE)
# Let's find the median SAT score:
median(Mathlevel$sat, na.rm = TRUE)
# Finding the mode is a bit harder.
# Sadly mode(x) doesn't work.
# Let's create our own function.
# First, we can find all of the unique values
uni <- unique(Mathlevel$sat)
# This next function finds the how many times each value shows up and picks the largest
uni[which.max(tabulate(match(Mathlevel$sat, uni)))]
# Rather than calling these two complicated functions every time we want to find a mean,
# let's make a function. Note that the variable Mathlevel$sat is replaced with x
Mode <- function(x) {
uni <- unique(x)
uni[which.max(tabulate(match(x, uni)))]
}
# Let's find the mode SAT score using our new function!
Mode(Mathlevel$sat)
# Now that we have the measures of central tendency, let's view the density plot.
plot(density(Mathlevel$sat), main = "Density of SAT scores")
?density
mode(Mathlevel$sat)
unique(Mathlevel$sat)
?boxplot
sat_box <- boxplot(Mathlevel$sat)
sat_box
?box
?boxplot
sat_box <- boxplot(Mathlevel$sat)
sat_box
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Mathlevel")
sat_box <- boxplot(Mathlevel$sat)
sat_box
?boxplot
sat_box$out
# The IQR is just
sat_IQR <- sat_box$stats[4] - sat_box$stats[2]
sat_IQR
# Now let's find the range of values
range(Mathlevel$sat)
range_sat <- min_max_sat[1] - min_max_sat[0]
# Now let's find the range of values
min_max_sat <- range(Mathlevel$sat)
range_sat <- min_max_sat[1] - min_max_sat[0]
range_sat
range_sat <- min_max_sat[2] - min_max_sat[1]
range_sat <- min_max_sat[2] - min_max_sat[1]
range_sat
# Now let's find the range of values
range_sat <- max(Mathlevel$sat) - min(Mathlevel$sat)
range_sat
# Let's find the standard deviations
summary(Mathlevel$sat)
# Let's find the standard deviations
?var
# Let's find the standard deviations
?stdev
# Let's find the standard deviations
summaryRprof(Mathlevel$sat)
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Mathlevel")
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat)
sat_box
# Now let's find the range of values
range_sat <- max(Mathlevel$sat) - min(Mathlevel$sat)
# Look at the Help box, and scroll down to the Value section.
?boxplot
# Let's look at the Quartile values
summary(Mathlevel$sat)
# The IQR is just
sat_IQR <- sat_box$stats[4] - sat_box$stats[2]
# We can also get a list of all of the outlier values
sat_box$out
# Let's find the standard deviations
sd(Mathlevel$sat)
?sd
# Let's find the variance
var(Mathlevel$sat)
sat_IQR
IQR(Mathlevel$sat)
# First, let's get the minimum and maximum values
sat_range <- range(Mathlevel$sat)
# Now, we will find the difference between the minimum and maximum values
diff(sat_range)
# Now let's find the range of values
range_sat <- max(Mathlevel$sat) - min(Mathlevel$sat)
range_sat
?var
# Let's find the variance
var(Mathlevel$sat)
# Let's find the variance
sqrt(var(Mathlevel$sat))
# Let's find the standard deviations
sd(Mathlevel$sat)
sd?
# Let's find the standard deviations
sd(Mathlevel$sat)
?sd
d(1:2) ^ 2
ad(1:2) ^ 2
sd(1:2) ^ 2
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Treatment")
# What is the range of the data?
Treatment$age
# What is the range of the data?
range(Treatment$age)
# What is the the minimum and maximum age of participants? What is the difference?
age_range <- range(Treatment$age)
diff(age)
# What is the IQR of the age of participants?
IQR(Treatment$age)
# What is the standard deviation?
sd(Treatment$age)
# What is the variance of age?
var(Treatment$age)
# What is the the minimum and maximum age of participants? What is the difference?
age_range <- range(Treatment$educ)
diff(age_range)
age_range
# What is the IQR of the age of participants?
IQR(Treatment$educ)
# What is the variance of age?
var(Treatment$educ)
# What is the standard deviation?
sd(Treatment$educ)
mean(Treatment$educ)
?Treatment
# What is the the minimum and maximum age of participants? What is the difference?
educ_range <- range(Treatment$re78)
diff(educ_range)
# What is the IQR of the age of participants?
IQR(Treatment$re78)
# What is the variance of age?
var(Treatment$re78)
# What is the standard deviation?
sd(Treatment$re78)
Treatmen$re78
Treatment$re78
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
# First, we will save the data as a variable in RStudio
data("Mathlevel")
summary(Mathlevel$sat)
?quantile
?Mathlevel
?ggplot
?aes
ggerrorplot(Mathlevel, sat, mean, desc_stat = "mean_sd")
# Look at the Help box, and scroll down to the Value section.
?boxplot
sat_box$conf
sat_box$out
sat_box
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat)
sat_box
?boxplot
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat, ylab =“SAT score”, main = "Student SAT Scores")
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat, ylab = "Student SAT Scores", main = "Student SAT Scores")
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat, ylab = "SAT Scores", main = "Student SAT Scores")
# Let's make a boxplot with the data
sat_box <- boxplot(Mathlevel$sat, ylab = "SAT Score", main = "Student SAT Scores")
mean(5,4,3,2)
mean(5,4, 5,3,2)
Mode(5,4, 5,3,2)
source('~/PsycStatsWorkbook/PsycStatsWorkbook/Central_Tendency/Mathlevel_Practice.R')
library(modeest)
install.packages(modeest)
install.packages(modeest)
install.packages("modeest")
# Let's find the mode SAT score using our new function!
Mode(Mathlevel$sat)
mfv(Mathlevel$sat)
library(modeest)
mfv(Mathlevel$sat)
unique(1,2,3,3,4,5,5,5)
unique([1,2,3,3,4,5,5,5])
unique(vector(1,2,3,3,4,5,5,5))
vector
unique(vectorize(1,2,3,3,4,5,5,5))
unique(as.data.frame(1,2,3,3,4,5,5,5))
unique(as.data.frame.vector(1,2,3,3,4,5,5,5))
unique(as.vector(1,2,3,3,4,5,5,5))
unique(c(1,2,3,3,4,5,5,5))
match(Mathlevel$sat, uni)
tabulate(match(Mathlevel$sat, uni))
unique(Mathlevel$sat)
uni[which.max(tabulate(match(Mathlevel$sat, uni)))]
uni <- unique(Mathlevel$sat)
uni
median(Mathlevel$sat, na.rm = TRUE)
mean(Mathlevel$sat, na.rm = TRUE)
Mode(Mathlevel$sat)
plot(density(Mathlevel$sat), main = "Density of SAT scores")
?density
density(Mathlevel$sat)
View(Mathlevel)
?Mathlevel
mean(Mathlevel[which(Mathlevel$sex == male)]$sat)
mean(Mathlevel[which(Mathlevel$sex == "male")]$sat)
mean(Mathlevel[where(Mathlevel$sex == "male")]$sat)
Mathlevel[where(Mathlevel$sex == "male")]
Mathlevel[which(Mathlevel$sex == "male")]
Mathlevel$sex
?which
which(Mathlevel, sex=="male")
which(Mathlevel)
which(Mathlevel$sex == female)
which(Mathlevel$sex == "female")
which(Mathlevel$sex == "male")
Mathlevel[which(Mathlevel$sex == "male")]
Mathlevel[which(Mathlevel$sex == "male")]$sex
Mathlevel$sex[which(Mathlevel$sex == "male")]
Mathlevel$sat[which(Mathlevel$sex == "male")]
mean(Mathlevel$sat[which(Mathlevel$sex == "male")])
mean(Mathlevel$sat[which(Mathlevel$sex == "female")])
mean(Mathlevel$sat[which(Mathlevel$language == "no")])
mean(Mathlevel$sat[which(Mathlevel$language == "yes")])
count(Mathlevel$sat[which(Mathlevel$language == "yes")])
row(Mathlevel$sat[which(Mathlevel$language == "yes")])
nrow(Mathlevel$sat[which(Mathlevel$language == "yes")])
(Mathlevel$sat[which(Mathlevel$language == "yes")])
plot(density((Mathlevel$sat[which(Mathlevel$language == "yes")])))
plot(density((Mathlevel$sat[which(Mathlevel$language == "no")])))
language_sat <- Mathlevel$sat[which(Mathlevel$language == "yes")]
no_language_sat <- Mathlevel$sat[which(Mathlevel$language == "no")]
mode(no_language_sat)
length(no_language_sat)
length(language_sat)
mean(no_language_sat)
mean(language_sat)
mean(mean(language_sat),mean(no_language_sat))
weighted.mean(c(mean(language_sat). mean(no_language_sat)), c(count(language_sat), count(no_language_sat)))
weighted.mean(c(mean(language_sat), mean(no_language_sat)), c(count(language_sat), count(no_language_sat)))
group_means <- c(mean(language_sat), mean(no_language_sat))
group_means
group_lengths <- c(length(language_sat), lenght(no_language_sat))
group_lengths <- c(length(language_sat), lengtj(no_language_sat))
group_lengths <- c(length(language_sat), length(no_language_sat))
weighted.mean(group_means, group_lengths)
source('~/PsycStatsWorkbook/PsycStatsWorkbook/Frequency_Distributions_and_Graphs/msq_practice.R')
length(msq)
nrow(msq)
# Make a frequency table using the variable "sad"
sad_frequency <- msq %>% count(sad)
sad_frequency # View the table in the console. "n" is the number of observations
View(sad_frequency) # View the table in a data window
library(dplyr)
library(knitr)
library(DT)
library(xtable)
kable(sad_frequency)
kable(sad_frequency, format = "markdown")
sad_frequency$sad <- c("Not at all", "A little", "Moderately", "Very Much", "NA")
# Make a frequency table using the variable "sad"
sad_frequency <- msq %>% count(sad)
sad_frequency # View the table in the console. "n" is the number of observations
# The numeric scale won't mean much to readers. Change the column "sad" to a vector of strings (explain)
sad_frequency$sad <- c("Not at all", "A little", "Moderately", "Very Much", "NA")
flextable(sad_frequency) # A pretty table that can be exported as a picture
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = sad), na.) + geom_bar()
# The numeric scale won't mean much to readers. Change the column "sad" to a vector of strings (explain)
sad_frequency$sad <- c("Not at all", "A little", "Moderately", "Very Much", "NA")
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = sad), na.) + geom_bar()
# Let's visualize this with a barplot:
ggplot(data = sad_frequency, mapping = aes(x = sad), na.) + geom_bar()
# Let's visualize this with a barplot:
ggplot(data = sad_frequency, mapping = aes(x = n), na.) + geom_bar()
flextable(sad_frequency) # A pretty table that can be exported as a picture
sad_frequency
# Let's visualize this with a barplot:
ggplot(data = sad_frequency, mapping = aes(x = n), na.) + geom_bar()
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = n), na.) + geom_bar()
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = n), na.) + geom_bar()
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = sad), na.) + geom_bar()
# Make a frequency table using the variable "happy"
happy_frequency <- msq %>% count(happy)
happy_frequency # View the table in the console. "n" is the number of observations
View(happy_frequency) # View the table in a data window
kable(happy_frequency)
flextable(happy_frequency) # A pretty table that can be exported as a picture
# Let's visualize this with a barplot:
ggplot(data = msq, mapping = aes(x = happy), na.) + geom_bar()
# Let's visualize this as a frequency polygon
ggplot(data = msq, mapping = aes(x =Neuroticism )) + geom_freqpoly(binwidth = Neuroticism_interval_size, na.rm = TRUE)
# Let's visualize this as a histogram
ggplot(data = msq, mapping = aes(x =Neuroticism )) + geom_histogram(binwidth = Neuroticism_interval_size, na.rm = TRUE)
install.packages("rstan")
library(rstan)
error.bars(Mathlevel$sat)
library(dplyr)
library(Ecdat)
library(flextable)
library(ggplot2)
ggplot(Mathlevel$sat) + geom_bar() + geom_errorbar()
# First, we will save the data as a variable in RStudio
data("Mathlevel")
head(Mathlevel)
ggplot(Mathlevel, aes(x=major, y=sat)) + geom_bar() + geom_errorbar()
ggplot(Mathlevel, aes(x=major, y=sat)) +geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=len-sd, ymax=len+sd), width=.2,
position=position_dodge(.9))
ggplot(Mathlevel, aes(x=major, y=sat)) +geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar()
ggplot(Mathlevel, aes(x=major, y=sat)) +geom_bar(stat="identity", color="black",
position=position_dodge())
ggplot(Mathlevel, aes(x=major, y=sat)) +geom_bar(stat="identity", color="black", position=position_dodge())
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=sat-sd, ymax=sat+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
Mode(Mathlevel$sat)
mode(Mathlevel$sat)
# Let's find the standard deviations
sd(Mathlevel$sat)
# Let's find the standard deviations
sd = sd(Mathlevel$sat)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=sat-sd, ymax=sat+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7)
sd
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue")
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7)
require(scales)
p + scale_x_continuous(labels = comma)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=sat-sd, ymax=sat+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_x_continuous(labels = comma)
ggplot(Mathlevel) +
geom_bar( aes(x=major, y=sat), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=sat-sd, ymax=sat+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_y_continuous(labels = comma)
mean(Mathlevel$sat)
aggregate(Mathlevel$sat, list(Mathlevel$major), mean)
means_by_major = aggregate(Mathlevel$sat, list(Mathlevel$major), mean, sd, var)
means_by_major = aggregate(Mathlevel$sat, list(Mathlevel$major), mean, sd)
means_by_major
means_by_major = aggregate(Mathlevel$sat, list(Mathlevel$major), mean+ sd)
means_by_major = Mathlevel$sat %>% group_by(major) %>% summarize_at(vars(sat), funs(mean, sd))
means_by_major = Mathlevel %>% group_by(major) %>% summarize_at(vars(sat), funs(mean, sd))
means_by_major
ggplot(means_by_major) +
geom_bar( aes(x=major, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=major, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_y_continuous(labels = comma)
ggplot(means_by_major) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_y_continuous(labels = comma)
head(Mathlevel)
means_by_major = Mathlevel %>% group_by(language) %>% summarize_at(vars(sat), funs(mean, sd))
ggplot(means_by_major) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_y_continuous(labels = comma)
means_language = Mathlevel %>% group_by(language) %>% summarize_at(vars(sat), funs(mean, sd))
ggplot(means_language) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
scale_y_continuous(labels = comma)
means_language
ggplot(means_language) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
# The IQR is just
IQR(Mathlevel$sat)
ggplot(means_language) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(means_language) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7) + ylab("Mean SAT score") +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
?Mathlevel
ggplot(means_language) +
geom_bar( aes(x=language, y=mean), stat="identity", fill="skyblue", alpha=0.7)  +
geom_errorbar( aes(x=language, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)+
ylab("Mean SAT Score") + xlab("Foreign Language Proficiency ")
